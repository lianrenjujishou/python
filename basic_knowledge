basic types:
    list:
        characteristic: 
	    a.elements are mutable
	    b.elements locate in []
        initial ways:
	    a.a = []
	    b.a = list()
	    c.a = ['x','y']
	    d.a = string.split(separator)
    dictionary:
        characteristic:
	    a.elements consist of key:value
	    b.all keys are unique
	    c.elements locate in {}
	    d.fast speed 
	   *e.unordered,since 3.6 dictionary is ordered
        initial ways:
	    a.a = dict()
	    b.a = {}
	    c.a = {'x':'y', 'p':'q'}
    set:
        characteristic:
	    a.unordered
	    b.all elements are unique
	    c.elements locate in {} //same as dictionary
        initial ways:
	    a.a = set()
	    b.a = set('x', 'y')
    tuple:
        characteristic:
	    a.elements are immutable
	    b.elements locate in ()
        initial ways:
	    a.a = 'x', 'y'
	    b.a = ('x', 'y')
	    c.a = ()
	    d.a = 'x',
	    e.a = ('x',)
	    f.a = tuple()
	    g.a = tuple(iterable)
    *. init a empty set and a empty dictionary are different, though both are enclosed by {}. init a empty set with function set(), and init a empty dictionary with curly brace {}
----------methods in basic types----------
list: //https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences
    append()
    extend(iterable)
    insert(i, x)
    remove(x)
    pop([i])
    clear()
    index(x[, start[, end]])
    count(x)
    sort(key=None, reverse=False)  //this method use built-in sorted() method infact. the usage of argument key reference example of url: https://www.geeksforgeeks.org/sorted-function-python/
    reverse()
    copy()
dictionary:  //https://docs.python.org/3/library/stdtypes.html#dict
    len(d)
    d[key]
    d[key] = value
    del d[key]
    key in d
    key not in d
    iter(d)
    clear()
    copy()
    get(key[, default])
    items()
    keys()
    pop(key[, default])
    popitem()
    setdefault(key[, default])
    update([other])
    values()
   *Dictionary view objects
set:
    len(s)
    x in s
    x not in s
    isdisjoint(other)
    issubset(other)
    set <= other
    set < other
    issuperset(other)
    set >= other
    set > other
    union(*others)
    set | other | ...
    intersection(others)
    set & other & ...
    difference(*others)
    set - other - ...
    symmetric_difference(other)
    set ^ other
    copy()
    update(*others)
    set |= other | ...
    intersection_update(*others)
    set &= other & ...
    difference_update(*others)
    set -= other | ...
    symmetric_difference_update(other)
    set ^= other
    add(elem)
    remove(elem)
    discard(elem)
    pop()
    clear()
tuple:  //https://docs.python.org/3/library/stdtypes.html#typesseq-common
        //tuple implemtns Common Sequence Operations all operation, Common Sequence Types are list, tuple, range.
    x in s
    x not in s
    s + t
    x * n or n * s
    s[i]
    s[i:j]
    s[i:j:k]
    len(s)
    min(s)
    max(s)
    s.index(x[, i[, j]])
    s.count(x)
string: //https://docs.python.org/3/library/stdtypes.html#string-methods
    capitalize()
    casefold() //基本同lower(),但如果字符串中字符有的是英文有的是德文，它会对德文字符转化为英文字符，转化规则不知道，到现在也没用过,具体的看官文中给的例子吧，大概是将一个类似于"贝它"的德文字符，通过该方法后就变成英文字符"ss"了
    center(width[, fillchar])  //不明白的话看看原文解释的最后一句
    count(sub[, start[, end]])
    encode(encoding="utf-8", errors="strict")
    endswith(suffix[, start[, end]])
    expandtabs(tabsize=8)   //这个函数其实还是要好好想一下的，总结出来就一句话:"tab是从头开始数的，如果某个tab宽度大于位于该tab中的字符数时，使用空格对多余的这部分宽度进行填充"，也就是说理解的时候不要用"向字符串中插入tab"的思维去想，而是用"向tab中插字符，填不满补齐的思维去想".另外还以使用str.expandtabs().replace(" ", "1")这个语句去观察当前到底有几个空格(实际看到的是1，因为几个空格肉眼不好看，但是数1的个数还是很好数的)
    find(sub[, start[, end]])
    format(*args, **kwargs)
    format_map(mapping)
    index(sub[, start[, end]])
    isalnum()
    isalpha()
    isascii()
    isdecimal()
    isdigit()
    isidentifier()  //看看字符串是否符合识别符(只叫变量不太合适吧?)命名规则
    islower()
    isnumeric()
    isprintable()
    isspace()
    istitle()
    isupper()
    join(iterable)  //这个函数用的还是比较多的
    ljust(width[, fillchar])  //想想center()
    lower()
    lstrip([chars])  //这个应该也常用，无参数时去掉字符串开头的空白，有参数时，参数通常是个字符串，但要注意的是:去掉的不是以这个参数字符串，而是从开头向右依次看有没有字符串中的单个字符，有就去，遇到参数字符串中没有的字符则函数执行就结束了.也就是说该函数的参数如果是字符串"abc",你要用正则的[a,b,c]去解释
    partition(sep)  //返回值是一个含有三个元素的tuple.有两种情况，当分隔符参数sep出现在字符串中时，返回的tuple中的三个元素分别是 分隔符前面部分, 分隔符, 分隔符后面部分; 当分隔符未出现在字符串中时，返回的是 字符串本身, 空字符串, 空字符串.
    replace(old, new[, count])  //注意，如果没有第三个参数的话替换的是字符串中所有的出现，如果给出第三个参数的话，替换的是该参数给出的次数
    rfind(sub[, start[, end]])  //和find不同的是它返回的是最大的索引
    rindex(sub[, start[, end]]) //返回最大索引，如果sub串不在字符串中报错
    rjust(width[,fillchar])  //右对齐
    rpartition(sep)  //如果sep在字符串中出现多次，则以最后一次为分界点，上面的partition(sep)函数如果是sep出现多次的话是以第一次为分界点，最后进行三个元素的确定
    rsplit(sep=None, maxsplit=-1)  //简单来说就是使用参数sep指定的字符串作为调用该函数的字符串的分隔符，特点是：平时切分方向都是从左向右，它这个是从右向左切，如果不指定maxplit参数的话，默认情况下是全切，如果全切的话，无论从左向右还是从右向左没啥区别，也就是说注意一下指定了maxplit切割次数的情况下，得到的列表是什么样的.
    rstrip([chars])   //无参数是将字符串尾部的空白都去除，有参数时，特点是从字符串尾部向首部一个字母一个字母的检查，如果发现当前字符位于给定的参数字符串中，则删掉，一直这样，直到读到的字母不在参数指定的字符串中，则该函数执行结束
    split(sep=None, maxsplit=-1)  //和rsplit唯一区别是从左向右切，如果两个函数不指定切割次数的话，得到的结果是一样的 *.要注意的是两个函数中，如果分隔符位于开头或是结尾，则列表中会有空字符串元素, 如a="a123a" -> a.split("a") -> ['','123','']
    splitlines([keepends])  //该函数的作用目前想到的场景是:对html响应的处理，默认行分隔符不出现在列表中，但是如果keepends显式给出，则行分界符也会作为列表元素的一部分，出现在列表中. *.通过试验，keepends参数是数值，0表示false,其它数值表示true,只有评估为true时，列表元素才会包含行分界符，也就是说只有keepends这个参数是数值0时，得到的列表中元素后面不会出现行分界符，如果是除0之外的其它数值则得到的列表的元素后面是有分界符后缀的; 还有一点要注意的是分界符有很多，常用的有\n \r \r\n等，具体看官文吧
    startswith(prefix[, start[,end]])   //评估字符串打头的几个字符是否为参数指定的prefix,是则返回true,否则返回false, 还可以通过第二和/或第三个参数来评估字符串中某个子串是否以prefix打头
    strip([chars])  //常用，无参数时默认去掉字符串首尾空白，有参数时，参数通常是字符串，从左到右和从右到左分别读取字符看看是否在参数给定的字符串中，有则去掉，一直这样循环，直到首尾读到的字符都不在参数指定的字符串中则结束
    swapcase()  //将字符串中的大小写字符互换，说了一句现在想不到使用场景的话: s.swapcase().swapcase() == s,即字符串两次反转后并不一定得到原字符串
    title()  //说白了就是将给定的字符串中，如果首字符是字母的话给转化成大写，其它位置如果是字符的话都变成小写.但要注意它的转化是以单词为单位的，给个例子理解一下吧: 'hello world'.title()  ->  'Hello World'
    * static str.maketrans(x[, y[, z]])
    translate(table)   //上面两个一起说，maketrans()函数实际就是得到了一个1对1映射的字典，然后translate()函数中以上面函数得到的字典为参数，最后拿字典中的键和调用translate()函数字符串中的每个字符去比较，如果一样则将该字符串中的该字符替换为字典中相应键值，简单来说就是这样.但是maketrans()函数参数个数不同还有差别，下面具体说一下，maketrans()函数中的参数为1个，2个，3个时的情况:
        1个参数时:该参数类型必须是一个字典; 并且这个字典还有限制，什么限制呢? 必须是由Unicode序数或是长度为1的字符串作为键，Unicode序数，任意长度的字符串或None作为值. 也就是说当marketrans()只有一个参数时，该参数只能是一个字典类型，关键在于这个字典中键和值都可以是什么? 键可以是"单个Unicode字符的16进制数字，如\u4e2d", "单个Unicode字符的10进制数字, 如20013", "单个字符" 这三种类型，该函数返回的也是一个字典，特点是该字典的键都是"Unicode字码的10进制数字"; 值可以是10进制或由""引起来的16进制序列或是"任意长度的字符串"或None. 大概是下面几种情况吧，应该不全
            20013:'d'  |  20013: 21271 | 还可映射为None
    	    "\u4e2d":'d' | "\u4e2d": 21271  
    	        "中":'d'
    		    
    		        21271:'e'
    			    "\u5317":'e'
    			        "北":'e'
    				    2个参数和3个参数:这个好说，就如sed中有一个yank函数一样，两个字符串，长度相等，并且这两个字符串的字符是一对一的关系.如果有第三个字符串参数，则凡是出现在这个字符串中的字符全部映射为null,从实际看相当于删除的意思，看个例子:
    				            a = "abcde"
    					            b = "".maketrans("abcd","1234","e")
    						            a.translate(b) -> "1234"
    							    upper()  //将字符串中的小写字母都转化为大写
    							    zfill(width)  //指定字符串占的位宽，1.如果指定的width小于字符串的字符数，则没啥变化; 2.如果指定的width大于字符串的字符数，则返回的字符串中，多余的位宽字符使用数字0进行填充; *.特别要注意的是如果字符串有+或-号前缀，则补的0位于符号后，如"-42".zfill(5)  -> "-0042"
    
