basic types:
    list:
        characteristic: 
	    a.elements are mutable
	    b.elements locate in []
        initial ways:
	    a.a = []
	    b.a = list()
	    c.a = ['x','y']
	    d.a = string.split(separator)
    dictionary:
        characteristic:
	    a.elements consist of key:value
	    b.all keys are unique
	    c.elements locate in {}
	    d.fast speed 
	   *e.unordered,since 3.6 dictionary is ordered
        initial ways:
	    a.a = dict()
	    b.a = {}
	    c.a = {'x':'y', 'p':'q'}
    set:
        characteristic:
	    a.unordered
	    b.all elements are unique
	    c.elements locate in {} //same as dictionary
        initial ways:
	    a.a = set()
	    b.a = set('x', 'y')
    tuple:
        characteristic:
	    a.elements are immutable
	    b.elements locate in ()
        initial ways:
	    a.a = 'x', 'y'
	    b.a = ('x', 'y')
	    c.a = ()
	    d.a = 'x',
	    e.a = ('x',)
	    f.a = tuple()
	    g.a = tuple(iterable)
    *. init a empty set and a empty dictionary are different, though both are enclosed by {}. init a empty set with function set(), and init a empty dictionary with curly brace {}
----------methods in basic types----------
list: //https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences
    append()
    extend(iterable)
    insert(i, x)
    remove(x)
    pop([i])
    clear()
    index(x[, start[, end]])
    count(x)
    sort(key=None, reverse=False)  //this method use built-in sorted() method infact. the usage of argument key reference example of url: https://www.geeksforgeeks.org/sorted-function-python/
    reverse()
    copy()
dictionary:  //https://docs.python.org/3/library/stdtypes.html#dict
    len(d)
    d[key]
    d[key] = value
    del d[key]
    key in d
    key not in d
    iter(d)
    clear()
    copy()
    get(key[, default])
    items()
    keys()
    pop(key[, default])
    popitem()
    setdefault(key[, default])
    update([other])
    values()
   *Dictionary view objects
set:
    len(s)
    x in s
    x not in s
    isdisjoint(other)
    issubset(other)
    set <= other
    set < other
    issuperset(other)
    set >= other
    set > other
    union(*others)
    set | other | ...
    intersection(others)
    set & other & ...
    difference(*others)
    set - other - ...
    symmetric_difference(other)
    set ^ other
    copy()
    update(*others)
    set |= other | ...
    intersection_update(*others)
    set &= other & ...
    difference_update(*others)
    set -= other | ...
    symmetric_difference_update(other)
    set ^= other
    add(elem)
    remove(elem)
    discard(elem)
    pop()
    clear()
tuple:  //https://docs.python.org/3/library/stdtypes.html#typesseq-common
        //tuple implemtns Common Sequence Operations all operation, Common Sequence Types are list, tuple, range.
    x in s
    x not in s
    s + t
    x * n or n * s
    s[i]
    s[i:j]
    s[i:j:k]
    len(s)
    min(s)
    max(s)
    s.index(x[, i[, j]])
    s.count(x)
string: //https://docs.python.org/3/library/stdtypes.html#string-methods
    capitalize()
    casefold() //基本同lower(),但如果字符串中字符有的是英文有的是德文，它会对德文字符转化为英文字符，转化规则不知道，到现在也没用过,具体的看官文中给的例子吧，大概是将一个类似于"贝它"的德文字符，通过该方法后就变成英文字符"ss"了
    center(width[, fillchar])  //不明白的话看看原文解释的最后一句
    count(sub[, start[, end]])
    encode(encoding="utf-8", errors="strict")
    endswith(suffix[, start[, end]])
    expandtabs(tabsize=8)   //这个函数其实还是要好好想一下的，总结出来就一句话:"tab是从头开始数的，如果某个tab宽度大于位于该tab中的字符数时，使用空格对多余的这部分宽度进行填充"，也就是说理解的时候不要用"向字符串中插入tab"的思维去想，而是用"向tab中插字符，填不满补齐的思维去想".另外还以使用str.expandtabs().replace(" ", "1")这个语句去观察当前到底有几个空格(实际看到的是1，因为几个空格肉眼不好看，但是数1的个数还是很好数的)
    find(sub[, start[, end]])
    format(*args, **kwargs)
    format_map(mapping)
    index(sub[, start[, end]])
    isalnum()
    isalpha()
    isascii()
    isdecimal()
    isdigit()
    isidentifier()  //看看字符串是否符合识别符(只叫变量不太合适吧?)命名规则
    islower()
    isnumeric()
    isprintable()
    isspace()
    istitle()
    isupper()
    join(iterable)  //这个函数用的还是比较多的
    ljust(width[, fillchar])  //想想center()
    lower()
    lstrip([chars])  //这个应该也常用，无参数时去掉字符串开头的空白，有参数时，参数通常是个字符串，但要注意的是:去掉的不是以这个参数字符串，而是从开头向右依次看有没有字符串中的单个字符，有就去，遇到参数字符串中没有的字符则函数执行就结束了.也就是说该函数的参数如果是字符串"abc",你要用正则的[a,b,c]去解释
    partition(sep)  //返回值是一个含有三个元素的tuple.有两种情况，当分隔符参数sep出现在字符串中时，返回的tuple中的三个元素分别是 分隔符前面部分, 分隔符, 分隔符后面部分; 当分隔符未出现在字符串中时，返回的是 字符串本身, 空字符串, 空字符串.
    replace(old, new[, count])  //注意，如果没有第三个参数的话替换的是字符串中所有的出现，如果给出第三个参数的话，替换的是该参数给出的次数
    rfind(sub[, start[, end]])  //和find不同的是它返回的是最大的索引
    rindex(sub[, start[, end]]) //返回最大索引，如果sub串不在字符串中报错
    rjust(width[,fillchar])  //右对齐
    rpartition(sep)  //如果sep在字符串中出现多次，则以最后一次为分界点，上面的partition(sep)函数如果是sep出现多次的话是以第一次为分界点，最后进行三个元素的确定
    rsplit(sep=None, maxsplit=-1)  //简单来说就是使用参数sep指定的字符串作为调用该函数的字符串的分隔符，特点是：平时切分方向都是从左向右，它这个是从右向左切，如果不指定maxplit参数的话，默认情况下是全切，如果全切的话，无论从左向右还是从右向左没啥区别，也就是说注意一下指定了maxplit切割次数的情况下，得到的列表是什么样的.
    rstrip([chars])   //无参数是将字符串尾部的空白都去除，有参数时，特点是从字符串尾部向首部一个字母一个字母的检查，如果发现当前字符位于给定的参数字符串中，则删掉，一直这样，直到读到的字母不在参数指定的字符串中，则该函数执行结束
    split(sep=None, maxsplit=-1)  //和rsplit唯一区别是从左向右切，如果两个函数不指定切割次数的话，得到的结果是一样的 *.要注意的是两个函数中，如果分隔符位于开头或是结尾，则列表中会有空字符串元素, 如a="a123a" -> a.split("a") -> ['','123','']
    splitlines([keepends])  //该函数的作用目前想到的场景是:对html响应的处理，默认行分隔符不出现在列表中，但是如果keepends显式给出，则行分界符也会作为列表元素的一部分，出现在列表中. *.通过试验，keepends参数是数值，0表示false,其它数值表示true,只有评估为true时，列表元素才会包含行分界符，也就是说只有keepends这个参数是数值0时，得到的列表中元素后面不会出现行分界符，如果是除0之外的其它数值则得到的列表的元素后面是有分界符后缀的; 还有一点要注意的是分界符有很多，常用的有\n \r \r\n等，具体看官文吧
    startswith(prefix[, start[,end]])   //评估字符串打头的几个字符是否为参数指定的prefix,是则返回true,否则返回false, 还可以通过第二和/或第三个参数来评估字符串中某个子串是否以prefix打头
    strip([chars])  //常用，无参数时默认去掉字符串首尾空白，有参数时，参数通常是字符串，从左到右和从右到左分别读取字符看看是否在参数给定的字符串中，有则去掉，一直这样循环，直到首尾读到的字符都不在参数指定的字符串中则结束
    swapcase()  //将字符串中的大小写字符互换，说了一句现在想不到使用场景的话: s.swapcase().swapcase() == s,即字符串两次反转后并不一定得到原字符串
    title()  //说白了就是将给定的字符串中，如果首字符是字母的话给转化成大写，其它位置如果是字符的话都变成小写.但要注意它的转化是以单词为单位的，给个例子理解一下吧: 'hello world'.title()  ->  'Hello World'
    * static str.maketrans(x[, y[, z]])
    translate(table)   //上面两个一起说，maketrans()函数实际就是得到了一个1对1映射的字典，然后translate()函数中以上面函数得到的字典为参数，最后拿字典中的键和调用translate()函数字符串中的每个字符去比较，如果一样则将该字符串中的该字符替换为字典中相应键值，简单来说就是这样.但是maketrans()函数参数个数不同还有差别，下面具体说一下，maketrans()函数中的参数为1个，2个，3个时的情况:
        1个参数时:该参数类型必须是一个字典; 并且这个字典还有限制，什么限制呢? 必须是由Unicode序数或是长度为1的字符串作为键，Unicode序数，任意长度的字符串或None作为值. 也就是说当marketrans()只有一个参数时，该参数只能是一个字典类型，关键在于这个字典中键和值都可以是什么? 键可以是"单个Unicode字符的16进制数字，如\u4e2d", "单个Unicode字符的10进制数字, 如20013", "单个字符" 这三种类型，该函数返回的也是一个字典，特点是该字典的键都是"Unicode字码的10进制数字"; 值可以是10进制或由""引起来的16进制序列或是"任意长度的字符串"或None. 大概是下面几种情况吧，应该不全
        20013:'d'  |  20013: 21271 | 还可映射为None
        "\u4e2d":'d' | "\u4e2d": 21271  
        "中":'d'
        
        21271:'e'
        "\u5317":'e'
        "北":'e'
        2个参数和3个参数:这个好说，就如sed中有一个yank函数一样，两个字符串，长度相等，并且这两个字符串的字符是一对一的关系.如果有第三个字符串参数，则凡是出现在这个字符串中的字符全部映射为null,从实际看相当于删除的意思，看个例子:
            a = "abcde"
            b = "".maketrans("abcd","1234","e")
            a.translate(b) -> "1234"
    upper()  //将字符串中的小写字母都转化为大写
    zfill(width)  //指定字符串占的位宽，1.如果指定的width小于字符串的字符数，则没啥变化; 2.如果指定的width大于字符串的字符数，则返回的字符串中，多余的位宽字符使用数字0进行填充; *.特别要注意的是如果字符串有+或-号前缀，则补的0位于符号后，如"-42".zfill(5)  -> "-0042"
----------
处理时间的方法: //https://www.cnblogs.com/lianrenjujishou/p/5456321.html
datetime模块
 datetime类
    属性: 年，月，日，时，分，秒，微秒，tzinfo  // help(datetime.datetime)
    实例化: datetime.datetime(year,month,day,hour,minute,second,microsecond,tzinfo)
    实例方法: today()
              now(tz=None)
 date类:  //博客中的例子基本上将方法的用法都提到了
    属性: 年，月，日
    实例化: datetime.date(year, month, day)
    实例方法:today(),
             fromtimestamp(timestamp)   //time.time()返回的就是时间戳可作为函数参数
             fromordinal(ordinal) //该函数参数是从1年1月1日起的天数，函数结果是一个年月日的日期，也就是说根据总天数算日期的这么一个函数
             replace(year,month,day) //这个简单，修改年月日属性
             timetuple()  //返回一个实例，实例中的属性很全，包含年，月，日，时，分，秒，星期几，当年第几天，是否是夏令时这九个属性
             toordinal()  //这个是使用date调用得到从1年1月1日到该日期的天数，正好与fromordinal(ordinal)函数相反
             weekday() //使用数字返回星期几，0-6
             isoweekday() //使用数字返回星期几, 1-7
             isocalendar() //返回一个三元组，iso年，iso一年中第几个星期，iso星期几
             isoformat()  //将实例化的日期格式化为可读的字符串  // '2002-12-04'
             __str__()  //参见isoformat()
             ctime() // 返回一个字符串 "Thu May 9 13:39:24 2019"
             strftime(format) //这个就是对日期的一个格式化，参数有很多

 time类
    属性: 小时，分钟， 秒，微秒，tzinfo  // help(datetime.time) ; 它的isoformat()与strftime()这两个函数应该常用
 timedelta类
    *.使用微秒来表示两个date,time或是datetime实例的间隔
    实例化:datetime.timedelta(weeks,days,hours,minutes,seconds,milliseconds,microseconds) //实例化后，系统只存储 days, hours, microseconds,实际给出的那么多单位都会向这三个单位进行转换
    实例属性: days, hours, microseconds
    实例方法: total_seconds()
 tzinfo类
 timezone类
    实例化: datetime.timezone(offset[, name])
    实例方法: utcoffset(dt)
              tzname(dt)
              dst(dt)
              fromutc(dt)
 strftime()和strptime()
----------------
文件读写
 读:
     f = open('file_name'[, encoding="utf8"], mode='r[b]')
     f.readline() | f.readlines() | for i in f
 写:
     f = open('file_name'[,encoding="utf8"] ,mode='w[b]')
     f.write()
     f.write()
 *.当mode中有'b'时，不能指定encoding参数
----------------
多线程 之 threading模块:
  利用threading模块创建多线程的两种方式:
       1.向Thread类传递一个可调用的参数
       2.新建Thread类的子类，然后重写父类的__init__()方法与run()方法 //我记得子类实例化的时候应该会自动先对父类初始化吧，为什么要手动的在子类中实现父类的__init__()方法呢?
  threading模块的top-level方法:
      active_count()  //返回的是当前存活线程的个数，即返回值是个数字，这个数字还等价于enumerate()函数返回的列表长度,即"active_count() == len(enumerate())"
      current_thread() //返回的是当前调用该函数的线程，这个线程名称可以在enumerate()函数返回的列表中找到
      get_ident()  //返回的是调用该函数线程的标识符，该标识符是个数字，数字本身并没有什么意义，通常用作magic cookie,例如可以利用该数字来索引一个字典中指定线程的数据; 还有一点该标识符数字可以被重复使用，即如果该线程结束掉，后面新的线程可以被分配相同的标识符数字
      enumerate()  //返回一个总的线程列表，包括，主线程，daemonic线程，由current_thread()创建的伪线程
      main_thread()  //这个通常是启动python解释器的那个线程
     *settrace(func)    //这三个先放一放
     *setprofile(func)  //
     *stack_size([size]) //
  threading模块的top-level属性:
      TIMEOUT_MAX  //它返回一个数值，实际用法就是作为参考值，函数中设置的超时时间不能超过该返回值，否则会抛异常
  threading模块中如何实现线程私有数据:
      *.因为线程是共享进程空间的，所以默认情况下所有线程访问的数据都是一样的，所以在新建线程中新建threading.local()对象，然后使用相应实例下义的属性只属于该线程私有    // mydata = threading.local()    mydata.x = 1
  threading模块新建线程利用的是其中的Thread类:
      Thread类构造器参数: group, target, name, args, kwargs, daemon
      实例方法和属性:
          start()  //它最常用，作用是在新的控制线程中执行run()方法,当前的理解是:也就是说所有的业务代码应该都放在run()函数中; 另外一个线程只能调用一次start()方法，如果多次调用会抛RuntimeError异常
	  run()  //看意思是run()函数运行的时候，执行的是Thread类实例化时指定的类参数target的值，该值猜测应该通常是个函数；然后还会读取Thread类实例化时指定的类参数args以及kwargs对target函数进行传参
	  join(timeout=None)  //执行方方法的线程会被阻塞，直到相应线程被终止或是timeout超时
	  name
	  getName()
	  setName()
	  ident()
	  is_alive()
	  daemon
	  isDaemon()
	  setDaemon()
    剩下的内容就是threading模块中为了解决synchronization而设计的一系列锁:
        Lock类:
	RLock类:
        Condition(lock=None)类:
	Semaphore类:
	Event类:
	Timer类:
	Barrier类:
    新建线程的例子:
        a.不用子类继承，直接利用run()函数的特性: 默认情况下run()方法会执行Thread()类初始化时给定的target参数值(一般是函数名)，如果target指定的函数有参数的话，可以通过Thread类的args参数和kwargs参数进行传参，这两个参数的默认值一个是(),一个是{}.也就是说在Thread类实例化时指定了上面三个参数后，直接调用start()方法即可在新建的线程中执行target指定的函数:
	def test(x,y):
	    print("%d"%(x+y))
	t = threading.Thread(target=test, args=(5, 6))
	t.start()
	*.可以在test函数中加上一句print(threading.current_thread())就可以看到执行线程名并不是main线程，而是新建线程
	b.使用子类继承Thread类的方式，此时需要注意的问题是: "子类继承父类时，在对子类实例化的时候，并不会默认执行父类的__init__()函数，而有些时候父类的部分操作依赖于父类中的__init__()函数进行一些初始化操作，如果没有这些初始化操作，子类在调用父类的某些函数时可能会出问题"; 还有一个问题: "使用子类时，如果在子类中找不到的内容会在其先辈中一级一级的找，直到找到为止，有一个关键点是:类在实例化的时候会调用__init__()方法". 接下来引入b这个方法:
	    1.如果在子类中没有定义__init__()函数的情况下, 我们可以直接重写run方法，则此时多线程运行的就是override后的这个run()方法中的语句; 要说的重点是因为子类中没有定义__init__()方法，所以在子类实例化时，因为在子类中找不到__init__()方法，它就会去父类中找，从而将Thread类的__init__()方法执行了，继而子类中再引用父类中的其它方法时都不会有问题;
	        def test(x,y):
		    print("%d"%(x+y))
		class a(Thread):
		    def run(self):
		        print("I am ok")
	        new = a()
		a.start()   //此时执行自定义run()方法下的print()函数，而Thread类中run()方法的默认行为是调用Thread()类中的target指定的函数
             2.如果子类中自定义了__init__()方法，则要在子类__init__()方法中加上一条Thread.__init__(self)显式的执行，而这一条语句其实写法也不固定，可以只写Thread.__init__(self),此时由于父类中的__init__()方法都用的是默认值，而默认值中target=None,所以为了有意义，我们要override 父类的run()方法，在这个override的run()方法中自定义我们自己的逻辑; 另一种写法是Thread.__init__(self, target=func_name[,args=(),kwargs={}]),也就是初始化父类的时候给出target值，此时如果函数有参数的话还要看情况给定args参数或是kwargs参数,这种情况下，我们可以不用在子类中override run()方法，直接实例化子类，然后调用start()函数，因为默认的run()方法有一个有意义的target指定的函数可以执行，当然如果我们override run()函数也没问题，不过这么写就有点不伦不类了，你既然都指定了target了，再override run()的话，这个target的指定不就没有意义了嘛
	     class a(Thread):
	         def __init__(self):
		     Thread.__init__(self, target=test, args=(8,9))
             new = a()
	     new.start()  //此时执行的是test()函数，输出的是"I am ok"

	     class a(Thread):
	         def __init__(self):
		     Thread.__init__(self)
		 def run(self):
		     print("I am ok")
             new = a()
	     new.start()  //此时执行的是自定义的run()函数中的语句，即print(),输出"I am ok"
**.关于使用threading模块中的Thread类新建线程的总结:
    上面讲的其实挺乱的，但最终要说明的有两点:
                  1.无论如何Thread类中的__init__()都要被执行，无论你采用什么方法;
		  2.调用start()方法时，实际上是在新线程中执行run()方法. 如果你不想在子类中重写run()方法，则要在调用Thread类的__init__()方法时传入target值，如果你想重写run()方法，则执行Thread类的初始化方法时，只需写作Thread.__init__(self)即可
**.有时间看看threading.py把内部实际的逻辑搞清楚
----------------
面象对象
----------------
**.这块的内容主要是看类一章的内容: https://docs.python.org/3/tutorial/classes.html?highlight=class
主要说几点吧:
    1.类中的方法或属性都加上self,这只是一个约定，这个self没有实际的意义，通过加日志打印，在threading模块的Thread.__init__()中，self输出的是线程信息
    2.类在实例化的时候会自动执行__init__()方法，所以如果有什么初始化的操作可以在类中加上这个方法
    3.看样子类中的__init__()方法就是类的构造器，所以可以在类实例化的时候传参，这些传入的参数值实际被传递给了__init__()方法中的形参
    4.继承的声明为 class derived_class(base_class):
    5.可以给类随时添加属性(点分形式)  //见Odds and Ends小节的例子
    6.可以在类外定义函数，然后通过赋值的形式传给类中的变量，即类中的方法不是一定要声明在类中  // 见Random Remarks例子
    7.另外这一节的Iterator以及generators, Generator Expressions都是很重要的内容
